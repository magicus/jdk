#
# Copyright (c) 2015, 2025, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

################################################################################

include JavaCompilation.gmk
include Modules.gmk

# This is needed to properly setup DOCS_MODULES.
$(eval $(call ReadImportMetaData))

JAVADOC_MODULES := $(DOCS_MODULES)

# Get the complete module source path:
JAVADOC_MODULESOURCEPATH := $(call GetModuleSrcPath)

ELEMENT_LISTS_PKG := jdk/javadoc/internal/doclets/toolkit/resources/releases

GENERATE_SYMBOLS_FROM_JDK_VERSION := 11

# Unfortunately there is no better way to generate the list 11..(N-1) in make
ALL_VERSION_LIST := $(call sequence, $(GENERATE_SYMBOLS_FROM_JDK_VERSION), \
				 $(JDK_SOURCE_TARGET_VERSION))
HISTORICAL_VERSION_LIST := $(filter-out $(lastword $(ALL_VERSION_LIST)), \
                                 $(ALL_VERSION_LIST))

ELEMENT_LISTS_INPUT_DIR := $(TOPDIR)/src/jdk.compiler/share/data/symbols
# This might have been added to by a custom extension
CT_DATA_DESCRIPTION += $(ELEMENT_LISTS_INPUT_DIR)/symbols

ELEMENT_LISTS_INPUT := $(wildcard $(ELEMENT_LISTS_INPUT_DIR)/*)

ELEMENT_LISTS_OUTPUT_DIR := $(JDK_OUTPUTDIR)/modules/jdk.javadoc/$(ELEMENT_LISTS_PKG)
ELEMENT_LISTS_HISTORICAL_OUTPUT := $(foreach v, $(HISTORICAL_VERSION_LIST), \
    $(ELEMENT_LISTS_OUTPUT_DIR)/element-list-$v.txt)
ELEMENT_LISTS_CURRENT_OUTPUT := \
    $(ELEMENT_LISTS_OUTPUT_DIR)/element-list-$(JDK_SOURCE_TARGET_VERSION).txt

INTERIM_OUTPUT_DIR := $(BUILDTOOLS_OUTPUTDIR)/interim_langtools_modules/jdk.javadoc.interim
ELEMENT_LISTS_INTERIM_OUTPUT_DIR := $(INTERIM_OUTPUT_DIR)/$(ELEMENT_LISTS_PKG)

COMPILECREATESYMBOLS_ADD_EXPORTS := \
    --add-exports java.base/jdk.internal=java.compiler.interim,jdk.compiler.interim \
    --add-exports jdk.internal.opt/jdk.internal.opt=jdk.compiler.interim,jdk.javadoc.interim \
    --add-exports jdk.compiler.interim/com.sun.tools.javac.api=ALL-UNNAMED \
    --add-exports jdk.compiler.interim/com.sun.tools.javac.code=ALL-UNNAMED \
    --add-exports jdk.compiler.interim/com.sun.tools.javac.util=ALL-UNNAMED \
    --add-exports jdk.compiler.interim/com.sun.tools.javac.jvm=ALL-UNNAMED \
    #

$(eval $(call SetupJavaCompilation, COMPILE_CREATE_SYMBOLS, \
    TARGET_RELEASE := $(TARGET_RELEASE_BOOTJDK), \
    SRC := $(TOPDIR)/make/src/jdk.compiler \
        $(TOPDIR)/src/jdk.jdeps/share/classes, \
    INCLUDES := jdk/internal/buildtools/symbolgenerator, \
    BIN := $(BUILDTOOLS_OUTPUTDIR)/create_symbols_javadoc, \
    DISABLED_WARNINGS := options, \
    JAVAC_FLAGS := \
        $(INTERIM_LANGTOOLS_ARGS) \
        $(COMPILECREATESYMBOLS_ADD_EXPORTS), \
))

# Generate element-list files for JDK 11 to current-1
$(eval $(call SetupRunBuildTool, GEN_ELEMENT_LISTS_HISTORICAL, \
    BUILDTOOL := symbolgenerator.CreateSymbols, \
    DEPS := $(MODULE_INFOS) $(ELEMENT_LISTS_INPUT), \
    INFO := Creating javadoc element lists for historic JDK versions, \
    OUTPUT_DIR := $(ELEMENT_LISTS_OUTPUT_DIR), \
    ARGUMENTS := build-javadoc-data $(CT_DATA_DESCRIPTION) \
        $(ELEMENT_LISTS_OUTPUT_DIR) $(GENERATE_SYMBOLS_FROM_JDK_VERSION), \
    PRE_COMMAND := $(RM) $(ELEMENT_LISTS_HISTORICAL_OUTPUT), \
    JAVA_OPTS := $(INTERIM_LANGTOOLS_ARGS) \
        $(COMPILECREATESYMBOLS_ADD_EXPORTS), \
))

TARGETS += $(GEN_ELEMENT_LISTS_HISTORICAL)

# Generate element-list file for the current JDK version
$(eval $(call SetupRunBuildTool, GEN_ELEMENT_LISTS_CURRENT, \
    BUILDTOOL := symbolgenerator.JavadocElementList, \
    DEPS := $(MODULE_INFOS) $(ELEMENT_LISTS_INPUT), \
    INFO := Creating javadoc element lists for the current JDK version, \
    OUTPUT_FILE := $(ELEMENT_LISTS_CURRENT_OUTPUT), \
    ARGUMENTS := $(ELEMENT_LISTS_CURRENT_OUTPUT) \
	        $(JAVADOC_MODULESOURCEPATH) \
	        $(JAVADOC_MODULES), \
    PRE_COMMAND := $(RM) $(ELEMENT_LISTS_CURRENT_OUTPUT), \
    JAVA_OPTS := $(INTERIM_LANGTOOLS_ARGS) \
          $(COMPILECREATESYMBOLS_ADD_EXPORTS), \
))

TARGETS += $(GEN_ELEMENT_LISTS_CURRENT)

################################################################################
# Copy element-lists to interim langtools

$(eval $(call SetupCopyFiles, COPY_TO_INTERIM, \
    SRC := $(ELEMENT_LISTS_OUTPUT_DIR), \
    DEST := $(ELEMENT_LISTS_INTERIM_OUTPUT_DIR), \
    FILES := $(wildcard $(ELEMENT_LISTS_OUTPUT_DIR)/*), \
))

TARGETS += $(COPY_TO_INTERIM)

################################################################################
