#
# Copyright (c) 2013, 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# Include support files that will setup compiler flags due to the selected
# jvm feature set, specific file overrides, and general flags.
include HotspotCommon.gmk

include lib/JvmFeatures.gmk
include lib/JvmOverrideFiles.gmk
include lib/JvmFlags.gmk

################################################################################
# Setup compilation of the main Hotspot native library (libjvm).

JVM_OUTPUTDIR := $(JVM_VARIANT_OUTPUTDIR)/libjvm
JVM_MAPFILE := $(JVM_OUTPUTDIR)/mapfile

################################################################################
# Platform independent setup

JVM_LDFLAGS += \
    $(SHARED_LIBRARY_FLAGS) \
    $(JVM_LDFLAGS_FEATURES) \
    $(EXTRA_LDFLAGS) \
    #

JVM_ASFLAGS += $(EXTRA_ASFLAGS)

JVM_LIBS += \
    $(JVM_LIBS_FEATURES) \
    #

# These files and directories are always excluded
JVM_EXCLUDE_FILES += args.cc
JVM_EXCLUDES += adlc

# Needed by abstract_vm_version.cpp
ifeq ($(call isTargetCpu, x86_64), true)
  OPENJDK_TARGET_CPU_VM_VERSION := amd64
else
  OPENJDK_TARGET_CPU_VM_VERSION := $(OPENJDK_TARGET_CPU)
endif

ifeq ($(VERSION_BUILD), )
  # Hotspot cannot handle an empty build number
  VERSION_BUILD := 0
endif

CFLAGS_VM_VERSION := \
    $(VERSION_CFLAGS) \
    -DHOTSPOT_VERSION_STRING='"$(VERSION_STRING)"' \
    -DDEBUG_LEVEL='"$(DEBUG_LEVEL)"' \
    -DHOTSPOT_BUILD_USER='"$(USERNAME)"' \
    -DHOTSPOT_VM_DISTRO='"$(HOTSPOT_VM_DISTRO)"' \
    -DCPU='"$(OPENJDK_TARGET_CPU_VM_VERSION)"' \
    #

ifneq ($(HOTSPOT_BUILD_TIME), )
  CFLAGS_VM_VERSION += -DHOTSPOT_BUILD_TIME='"$(HOTSPOT_BUILD_TIME)"'
endif

################################################################################
# Disabled warnings

DISABLED_WARNINGS_gcc := parentheses comment unknown-pragmas address \
    delete-non-virtual-dtor char-subscripts array-bounds int-in-bool-context \
    ignored-qualifiers  missing-field-initializers implicit-fallthrough \
    empty-body strict-overflow sequence-point maybe-uninitialized \
    misleading-indentation cast-function-type shift-negative-value

ifeq ($(call check-jvm-feature, zero), true)
  DISABLED_WARNINGS_gcc += return-type switch clobbered
endif

DISABLED_WARNINGS_clang := tautological-compare \
    undefined-var-template sometimes-uninitialized unknown-pragmas \
    delete-non-virtual-dtor missing-braces char-subscripts \
    ignored-qualifiers missing-field-initializers mismatched-tags \
    shift-negative-value misleading-indentation

DISABLED_WARNINGS_xlc := tautological-compare shift-negative-value

DISABLED_WARNINGS_microsoft := 4100 4127 4146 4201 4244 4291 4351 \
    4511 4512 4514 4624 4996

################################################################################
# Platform specific setup

# ARM source selection

ifeq ($(call And, $(call isTargetOs, linux) $(call isTargetCpu, arm)), true)
  JVM_EXCLUDE_PATTERNS += arm_64

else ifeq ($(call And, $(call isTargetOs, linux) $(call isTargetCpu, aarch64)), true)
  # For 64-bit arm builds, we use the 64 bit hotspot/src/cpu/arm
  # hotspot sources if HOTSPOT_TARGET_CPU_ARCH is set to arm.
  # Exclude the aarch64 and 32 bit arm files for this build.
  ifeq ($(HOTSPOT_TARGET_CPU_ARCH), arm)
    JVM_EXCLUDE_PATTERNS += arm_32 aarch64
  endif
endif

ifeq ($(call isTargetOs, linux macosx windows), true)
  JVM_PRECOMPILED_HEADER := $(TOPDIR)/src/hotspot/share/precompiled/precompiled.hpp
endif

ifeq ($(call isTargetCpu, x86), true)
  JVM_EXCLUDE_PATTERNS += x86_64
else ifeq ($(call isTargetCpu, x86_64), true)
  JVM_EXCLUDE_PATTERNS += x86_32
endif

JVM_OPTIMIZATION ?= HIGHEST_JVM

# Need to set JVM_STRIPFLAGS to the default value from SPEC since the STRIPFLAGS
# parameter to SetupNativeCompilation allows an empty value to override the
# default.
JVM_STRIPFLAGS ?= $(STRIPFLAGS)
