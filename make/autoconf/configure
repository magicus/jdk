#!/bin/bash
#
# Copyright (c) 2012, 2023, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

if [ "x$1" != xCHECKME ]; then
  echo "ERROR: Calling this wrapper script directly is not supported."
  echo "Use the 'configure' script in the top-level directory instead."
  exit 1
fi

# The next argument is the absolute top-level directory path.
# The TOPDIR variable is passed on to configure.ac.
TOPDIR="$2"
# Remove these two arguments to get to the user supplied arguments
shift
shift

if [ "$BASH" = "" ]; then
  echo "Error: This script must be run using bash." 1>&2
  exit 1
fi

if [[ "$TOPDIR" =~ .*[[:space:]]+.* ]]; then
  echo "Error: Build path containing space character is not supported" 1>&2
  exit 1
fi

# Make sure all shell commands are executed with the C locale
export LC_ALL=C

if [ "x$CUSTOM_CONFIG_DIR" != x ]; then
  # FIXME: Handle custom code
  :
fi

CURRENT_DIR=$(pwd)
if [ "$CURRENT_DIR" = "$TOPDIR" ]; then
  # We are running configure from the src root.
  # Create '.configure-support' under $TOPDIR/build
  support_dir="$TOPDIR/build/.configure-support"
elif [ "$CURRENT_DIR" = "$CUSTOM_ROOT" ]; then
  # We are running configure from the custom root.
  # Create '.configure-support' under $CUSTOM_ROOT/build
  support_dir="$CUSTOM_ROOT/build/.configure-support"
else
  # We are running configure from outside of the src dir.
  # Create 'configure-support' in the current directory.
  support_dir="$CURRENT_DIR/configure-support"
fi

java_source_dir="$TOPDIR/make/configure"
classes_dir="$support_dir/configure_classes"

###
### Process command-line arguments
###

# Returns a shell-escaped version of the argument given.
function shell_quote() {
  if [[ -n "$1" ]]; then
    if echo "$1" | grep '^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\.:,%/+=_-]\{1,\}$' > /dev/null \
        && ! echo "$1" | grep '^=' > /dev/null; then
      # No quoting needed if this argument uses only shell-safe characters
      quoted="$1"
    else
      # Quote it in single quotes and escape any single quotes in the argument
      quoted="'${quoted//\'/\'\\\'\'}'"
      # FIXME: verify behavior!
      # quoted="'$1'"
    fi
    echo "$quoted"
  fi
}

quoted_arguments=()

for option; do
  # Save the arguments, intelligently quoted for CONFIGURE_COMMAND_LINE,
  # except for the bootjdk option, which is extracted by us
  case $option in
    --bootjdk=* | --boot-jdk=* | --with-bootjdk=* | --with-boot-jdk=* )
      bootjdk=$(expr "X$option" : '[^=]*=\(.*\)')
      ;;
    *=* )
      option_name=$(expr "x$option" : 'x\([^=]*\)=')
      option_name=$(shell_quote "$option_name")
      option_value=$(expr "x$option" : 'x[^=]*=\(.*\)')
      option_value=$(shell_quote "$option_value")
      quoted_arguments=("${quoted_arguments[@]}" "$option_name=$option_value")
      ;;
    * )
      quoted_arguments=("${quoted_arguments[@]}" "$(shell_quote "$option")")
      ;;
  esac
done

# FIXME: check if we have a bootjdk on the command line
# locate it otherwise
java="$bootjdk/bin/java"

###
### Use javac to compile configure, if needed
###

compile_configure() {
  if [ "x$CUSTOM_CONFIG_DIR" != x ]; then
    # FIXME: Handle custom code
    :
  fi

  mkdir -p "$support_dir"

  # FIXME: Actually compile the script

  # Sanity check
  if [ ! -s "$classes_dir" ]; then
    echo "Error: Failed to compile configure" 1>&2
    rm -f "$classes_dir"
    exit 1
  fi
}

test_is_compiled_up_to_date() {
  source_files="$java_source_dir/*.java"
  if [ "x$CUSTOM_CONFIG_DIR" != x ]; then
    custom_source_files="$CUSTOM_CONFIG_DIR/*.java"
  else
    custom_source_files=""
  fi

  for file in $source_files $custom_source_files ; do
    if [ "$file" -nt "$classes_dir" ]; then
      return 0
    fi
  done
  return 1
}

compilation_needed=false

if [ ! -s "$classes_dir" ]; then
  # Generated script is missing, so we need to create it
  echo "Compiled configure is not present"
  compilation_needed=true
else
  # File is present, but is it up to date?
  if test_is_compiled_up_to_date; then
    echo "Compiled configure is not up to date"
    compilation_needed=true
  fi
fi

if [ "$compilation_needed" = true ]; then
  echo "Compiling configure to $classes_dir"
  compile_configure
fi

###
### Call the configure tool
###

# Save the quoted command line
# FIXME: Find better way to pass this to the configure tool
export CONFIGURE_COMMAND_LINE="${quoted_arguments[@]}"

$java -cp classes_dir org.openjdk.build.Configure "$@"
result_code=$?

exit $result_code
